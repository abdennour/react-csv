/** Declaration file generated by dts-gen */

export class CSVDownload {
  constructor(props: any)

  buildURI(...args: any[]): any

  componentDidMount(): void

  getWindow(): any

  render(): any

  static defaultProps: {
    asyncOnClick: boolean
    filename: string
    separator: string
    target: string
    uFEFF: boolean
  }
}

export class CSVLink {
  constructor(props: any)

  buildURI(...args: any[]): any

  handleAsyncClick(event: any, ...args: any[]): void

  handleClick(...args: any[]): any

  handleLegacy(event: any, data: any, headers: any, separator: any, filename: any): any

  handleSyncClick(event: any, ...args: any[]): void

  render(): any

  static defaultProps: {
    asyncOnClick: boolean
    filename: string
    separator: string
    target: string
    uFEFF: boolean
  }

  props: {
    data: Array<string> | Array<object> | string
    headers?: Array<string> | Array<object>
    separator?: string
    filename: string
    asyncOnClick?: boolean
    onClick?: () => {}
    target?: string
    style?: ComponentStyleAttributes
  }

  setState: () => void

  forceUpdate: () => void

  state: Object

  context: any

  refs: any
}

export namespace CSVDownload {
  namespace propTypes {
    function asyncOnClick(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any

    function data(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any

    function filename(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any

    function headers(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any

    function onClick(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any

    function separator(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any

    function target(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any

    function uFEFF(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any

    namespace asyncOnClick {
      function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any
    }

    namespace filename {
      function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any
    }

    namespace headers {
      function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any
    }

    namespace onClick {
      function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any
    }

    namespace separator {
      function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any
    }

    namespace target {
      function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any
    }

    namespace uFEFF {
      function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any
    }
  }

  namespace prototype {
    const isMounted: any

    const isReactComponent: {}

    const replaceState: any

    function buildURI(...args: any[]): any

    function componentDidMount(): void

    function forceUpdate(callback: any): void

    function getWindow(): any

    function render(): any

    function setState(partialState: any, callback: any): void

    namespace buildURI {
      const prototype: {}
    }

    namespace componentDidMount {
      const prototype: {}
    }

    namespace forceUpdate {
      const prototype: {}
    }

    namespace getWindow {
      const prototype: {}
    }

    namespace render {
      const prototype: {}
    }

    namespace setState {
      const prototype: {}
    }
  }
}

export namespace CSVLink {
  namespace propTypes {
    function asyncOnClick(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any

    function data(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any

    function filename(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any

    function headers(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any

    function onClick(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any

    function separator(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any

    function target(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any

    function uFEFF(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any

    namespace asyncOnClick {
      function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any
    }

    namespace filename {
      function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any
    }

    namespace headers {
      function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any
    }

    namespace onClick {
      function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any
    }

    namespace separator {
      function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any
    }

    namespace target {
      function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any
    }

    namespace uFEFF {
      function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any
    }
  }

  namespace prototype {
    const isMounted: any

    const isReactComponent: {}

    const replaceState: any

    function buildURI(...args: any[]): any

    function forceUpdate(callback: any): void

    function handleAsyncClick(event: any, ...args: any[]): void

    function handleClick(...args: any[]): any

    function handleLegacy(event: any, data: any, headers: any, separator: any, filename: any): any

    function handleSyncClick(event: any, ...args: any[]): void

    function render(): any

    function setState(partialState: any, callback: any): void

    namespace buildURI {
      const prototype: {}
    }

    namespace forceUpdate {
      const prototype: {}
    }

    namespace handleAsyncClick {
      const prototype: {}
    }

    namespace handleClick {
      const prototype: {}
    }

    namespace handleLegacy {
      const prototype: {}
    }

    namespace handleSyncClick {
      const prototype: {}
    }

    namespace render {
      const prototype: {}
    }

    namespace setState {
      const prototype: {}
    }
  }
}

interface ComponentStyleAttributes {
  [key: string]: string
}
